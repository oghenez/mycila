/**
 * Copyright (C) 2009 Mathieu Carbou <mathieu.carbou@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package euler;

import com.mycila.math.prime.PrimaltyTest;

import static java.lang.System.*;

/**
 * http://projecteuler.net/index.php?section=problems&id=58
 *
 * @author Mathieu Carbou (mathieu.carbou@gmail.com)
 */
class Problem058 {

    public static void main(String[] args) throws Exception {
        long time = currentTimeMillis();
        for (int counter = 0, i = 1; ; i++) {
            // just to be sure we stop if necessary
            if (i < 0) throw new IllegalStateException("overflow: int too small");
            // count primes
            if (PrimaltyTest.millerRabin(4 * i * i + 2 * i + 1)) counter++;
            if (PrimaltyTest.millerRabin(4 * i * i + 1)) counter++;
            if (PrimaltyTest.millerRabin(4 * i * i - 2 * i + 1)) counter++;
            // frequenlty outputs stats
            if (i % 1000 == 0) System.out.println(counter + " " + (0.4 * i + 0.1));
            // check for the 10% limit
            if (counter < 0.4 * i + 0.1) {
                out.println((2 * i + 1) + " in " + (currentTimeMillis() - time) + "ms");
                break;
            }
        }
    }

}
/*

For Euler's Problem 58, we can re-use what's done in problem 28.

We can call i the Nth square, i starting at 0.
* The south-east diagonal will never generate primes since it generates squares of the form: SE(i)=(1+2*i)^2=4*i^2+4*i+1
* For a given square i, corners which can be primecan be generated by:
    * SW(i)=SE(i)-2*i=4*i^2+2*i+1
    * NW(i)=SE(i)-4*i=4*i^2+1
    * NE(i)=SE(i)-6*i=4*i^2-2*i+1

For a square i:
* The total numbers on all diagonals is 4*i+1
* The length of the square is 2*i+1

So for each i, we will compute SW(i), NW(i), NE(i) and check if there are primes, to increment a counter.
We will stop when counter/4*i+1<10% => counter<0.4*i+0.1

*/
