/**
 * Copyright (C) 2009 Mathieu Carbou <mathieu.carbou@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mycila.math;

import static org.junit.Assert.*;
import org.junit.Test;

import java.math.BigInteger;
import static java.math.BigInteger.*;

import de.luschny.math.factorial.FactorialPrimeSwingLuschny;

/**
 * @author Mathieu Carbou
 */
public final class FactorialTest {

    @Test
    public void test_lookup() {
        assertEquals(Factorial.lookup(0), 1);
        assertEquals(Factorial.lookup(1), 1);
        assertEquals(Factorial.lookup(2), 2);
        assertEquals(Factorial.lookup(10), 3628800);
        assertEquals(Factorial.lookup(20), 2432902008176640000L);
    }

    @Test
    public void test_primeSwingLuschny() {
        for (int i = 0; i <= 20; i++)
            assertEquals(Factorial.primeSwingLuschny(i), BigInteger.valueOf(Factorial.lookup(i)));
        assertEquals(Factorial.primeSwingLuschny(21).toString(), "51090942171709440000");
        assertEquals(Factorial.primeSwingLuschny(22).toString(), "1124000727777607680000");
        assertEquals(Factorial.primeSwingLuschny(30).toString(), "265252859812191058636308480000000");
        BigInteger fact = Factorial.primeSwingLuschny(99);
        System.out.println("99! = " + fact);
        assertEquals(fact.toString(), "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000");
        fact = Factorial.primeSwingLuschny(100);
        System.out.println("100! = " + fact);
        assertEquals(fact.toString(), "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000");
        fact = Factorial.primeSwingLuschny(1000);
        System.out.println("1000! = " + fact);
        assertEquals(fact.toString(), "402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    @Test
    public void test_trivialDiv() {
        assertEquals(Factorial.falling(0, 0), 1);
        assertEquals(Factorial.falling(1, 1), 1);
        assertEquals(Factorial.falling(2, 1), 2);
        assertEquals(Factorial.falling(20L, 10L), 670442572800L);
    }

    @Test
    public void test_log() {
        assertEquals(63 - Long.numberOfLeadingZeros(0), valueOf(0).bitLength() - 1);
        assertEquals(63 - Long.numberOfLeadingZeros(1), valueOf(1).bitLength() - 1);
        assertEquals(63 - Long.numberOfLeadingZeros(10), valueOf(10).bitLength() - 1);
        assertEquals(63 - Long.numberOfLeadingZeros(Long.MAX_VALUE), valueOf(Long.MAX_VALUE).bitLength() - 1);
    }

}