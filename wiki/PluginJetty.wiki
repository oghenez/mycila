#sidebar PluginBar

= How To =

This is a [http://code.google.com/p/mycila/wiki/MycilaTesting Mycila testing plugin] which runs your web application with [http://www.eclipse.org/jetty/ Jetty-7] before running each of your tests. you can use [http://seleniumhq.org/ selenium] to test your webapp.

Using [http://maven.apache.org/plugins/maven-failsafe-plugin/usage.html maven integration test], your test will look like :

{{{
@RunWith(MycilaJunitRunner.class)
@JettyRunWar
public class MyWebAppIT {

    /**
     * Test something.
     */
    @Test
    public void testSomething()
    {
        // do and assert things with my running web application
    }
}
}}}

= `@JettyRunWar` Configuration =

== Default ==

`@JettyRunWar` will find the WAR file searching from the current directory and going through sub-directories. *There must be only one matching WAR file else the test fails.*

The WAR is loaded with Jetty, running on default port 9090 and defaut contextPath /.

So the web application is accessible at this address : http://localhost:9090/

== Port ==

`@JettyRunWar(serverPort = 8080)` will set the web application server port to 8080.

== Context Path ==

`@JettyRunWar(contextPath = "/test")` will set the web application context path to "/test".

== WAR Path ==

Will use '', 'reg:', 'sys:', 'ant:' prefix to distinguish WAR finding method.

=== Fixed ===

`@JettyRunWar("target/webapp-1.0-SNAPSHOT.war")` will check for this WAR from the current directory.

  * matches ${currentdir}/target/webapp-1.0-SNAPSHOT.war

`@JettyRunWar("/tmp/webapp-1.0-SNAPSHOT.war")` will check for this WAR from the root.

=== Regular Expression  : 'reg:' ===

`@JettyRunWar("reg:\\.\\/target\\/webapp-.*\\.war")` will find the WAR file that matches this Java Regular Expression searching from the current directory and going through sub-directories.

  * matches ${currentdir}/target/webapp-1.0-SNAPSHOT.war
  * BUT ${currentdir}/target/web-1.0-SNAPSHOT.war
  * BUT ${currentdir}/webapp-1.0-SNAPSHOT.war

=== System Property : 'sys:' ===

`@JettyRunWar("sys:warPath")` will find the WAR file that matches the _warPath_ system property.

  * matches ${currentdir}/target/webapp-1.0-SNAPSHOT.war if warPath = "target/webapp-1.0-SNAPSHOT.war"

=== Ant : 'ant:' ===

*Under development*

[http://ant.apache.org/manual/dirtasks.html Ant Path] are really much readable than Java Regular Expression even if there are less powerful.

`@JettyRunWar("ant:webapp-*.war")` will find the WAR file that matches this ant path searching from the current directory and going through sub-directories.

  * matches ${currentdir}/target/webapp-1.0-SNAPSHOT.war
  * BUT ${currentdir}/target/web-1.0-SNAPSHOT.war

