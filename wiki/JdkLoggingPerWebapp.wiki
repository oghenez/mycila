#summary JDK Logging Per Webapp
#labels Featured

== Introduction ==

Enables to use JDK logging in a web environment where each web application have its own logging configuration.

In your application, simply use the JDK loggers as usual.

== Download & Maven ==

You can download / get with Maven the JAR and its sources directly in the official Maven Repository at:

http://repo2.maven.org/maven2/com/mycila/jdk-logging-perwebapp/

They are also available here before getting into the official Maven Repository:

http://mc-repo.googlecode.com/svn/maven2/releases/com/mycila/jdk-logging-perwebapp/

== Installation ==

In your `web.xml` file, you have to put this context listener AT THE VERY FIRST POSITION:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    [...]

    <listener>
        <listener-class>com.mycila.jdk.logging.ContextualLogManagerWebappListener</listener-class>
    </listener>

    [...]

    <!-- other listeners here -->

    <!-- filters and servlets here -->
    
</web-app>
}}}

In your application server (JBoss, Jetty, Tomcat, Glassfich, ...) you must start it with the following system property:

`-Djava.util.logging.manager=com.mycila.jdk.logging.ContextualLogManager`

I.e. in Jetty, the line must put in the start.ini file of Jetty's installation folder.

== JDK Logging over Log4j ==

If you have a lot of classes depending on the JDK logging to avoid commons-logging, slf4j, ... but still want to log using log4j at the end to benefits of log rotation, compression, etc, you can execute at the very startup of your application:

`com.mycila.jdk.logging.JdkOverLog4j.install()`

This will redirect all JDK loggers to Log4j ones automatically.