/**
 * Copyright (C) 2008 Mathieu Carbou <mathieu.carbou@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mycila.maven.ui;

import javax.swing.*;
import java.awt.*;

/**
 * @author Mathieu Carbou - mathieu.carbou(at)gmail.com
 */
final class MavenDeployerGui {
    public JPanel formPanel;
    public JPanel bottomPanel;
    public JPanel topPanel;
    public JButton deploy;
    public JTextField groupId;
    public JTextField artifactId;
    public JComboBox classifier;
    public JTextField version;
    public JComboBox packaging;
    public JTextField repositoryURL;
    public JButton repositoryBrowser;
    public JTextField artifactFile;
    public JButton artifactBrowser;
    public JTextArea console;
    public JButton cancel;
    public JButton clear;
    public JTextField description;
    public JTextField repositoryID;
    public JButton loadPOM;
    public JCheckBox cbDeployPOM;
    public JTextField mavenBin;

    private void createUIComponents() {
        topPanel = new JPanel();
        clear = new JButton();
        loadPOM = new JButton();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        formPanel = new JPanel();
        formPanel.setLayout(new BorderLayout(0, 0));
        formPanel.setPreferredSize(new Dimension(800, 600));
        topPanel.setLayout(new GridBagLayout());
        formPanel.add(topPanel, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), Font.BOLD, label1.getFont().getSize()));
        label1.setForeground(new Color(-65536));
        label1.setText("GroupId");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label1, gbc);
        groupId = new JTextField();
        groupId.setText("");
        groupId.setToolTipText("GroupId of the artifact to be deployed.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(groupId, gbc);
        final JLabel label2 = new JLabel();
        label2.setFont(new Font(label2.getFont().getName(), Font.BOLD, label2.getFont().getSize()));
        label2.setForeground(Color.red);
        label2.setText("ArtifactId");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label2, gbc);
        artifactId = new JTextField();
        artifactId.setText("");
        artifactId.setToolTipText("ArtifactId of the artifact to be deployed.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(artifactId, gbc);
        final JLabel label3 = new JLabel();
        label3.setFont(new Font(label3.getFont().getName(), Font.BOLD, label3.getFont().getSize()));
        label3.setForeground(Color.red);
        label3.setText("Version");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label3, gbc);
        version = new JTextField();
        version.setText("");
        version.setToolTipText("Version of the artifact to be deployed.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(version, gbc);
        final JLabel label4 = new JLabel();
        label4.setFont(new Font(label4.getFont().getName(), Font.BOLD, label4.getFont().getSize()));
        label4.setForeground(Color.red);
        label4.setText("Repository (folder or URL)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label4, gbc);
        repositoryURL = new JTextField();
        repositoryURL.setEditable(true);
        repositoryURL.setFont(new Font(repositoryURL.getFont().getName(), Font.PLAIN, repositoryURL.getFont().getSize()));
        repositoryURL.setToolTipText("URL where the artifact will be deployed.\nExample: file://C:\\m2-repo, scp://host.com/path/to/repo, dav:https://mycompany.com/repo ) ");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(repositoryURL, gbc);
        repositoryBrowser = new JButton();
        repositoryBrowser.setFont(new Font(repositoryBrowser.getFont().getName(), Font.BOLD, repositoryBrowser.getFont().getSize()));
        repositoryBrowser.setPreferredSize(new Dimension(80, 20));
        repositoryBrowser.setText("Browse");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(repositoryBrowser, gbc);
        artifactFile = new JTextField();
        artifactFile.setText("");
        artifactFile.setToolTipText("File to be deployed. ");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(artifactFile, gbc);
        final JLabel label5 = new JLabel();
        label5.setFont(new Font(label5.getFont().getName(), Font.BOLD, label5.getFont().getSize()));
        label5.setForeground(Color.red);
        label5.setText("Artifact file");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label5, gbc);
        artifactBrowser = new JButton();
        artifactBrowser.setFont(new Font(artifactBrowser.getFont().getName(), Font.BOLD, artifactBrowser.getFont().getSize()));
        artifactBrowser.setPreferredSize(new Dimension(80, 20));
        artifactBrowser.setText("Browse");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(artifactBrowser, gbc);
        final JLabel label6 = new JLabel();
        label6.setFont(new Font(label6.getFont().getName(), Font.BOLD, label6.getFont().getSize()));
        label6.setRequestFocusEnabled(false);
        label6.setText("Repository ID");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label6, gbc);
        repositoryID = new JTextField();
        repositoryID.setDoubleBuffered(false);
        repositoryID.setText("");
        repositoryID.setToolTipText("Server Id to map on the <id> under <server> section of settings.xml In most cases, this parameter will be required for authentication.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 9;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(repositoryID, gbc);
        packaging = new JComboBox();
        packaging.setEditable(true);
        packaging.setFont(new Font(packaging.getFont().getName(), Font.PLAIN, packaging.getFont().getSize()));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("jar");
        defaultComboBoxModel1.addElement("war");
        defaultComboBoxModel1.addElement("zip");
        defaultComboBoxModel1.addElement("pom");
        packaging.setModel(defaultComboBoxModel1);
        packaging.setPreferredSize(new Dimension(94, 20));
        packaging.setToolTipText("Type of the artifact to be deployed.");
        packaging.setVerifyInputWhenFocusTarget(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(packaging, gbc);
        final JLabel label7 = new JLabel();
        label7.setFont(new Font(label7.getFont().getName(), Font.BOLD, label7.getFont().getSize()));
        label7.setForeground(Color.red);
        label7.setText("Packaging");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label7, gbc);
        final JLabel label8 = new JLabel();
        label8.setFont(new Font(label8.getFont().getName(), Font.BOLD, label8.getFont().getSize()));
        label8.setRequestFocusEnabled(false);
        label8.setText("Artifact description");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label8, gbc);
        description = new JTextField();
        description.setEditable(true);
        description.setFont(new Font(description.getFont().getName(), Font.PLAIN, description.getFont().getSize()));
        description.setToolTipText("Description passed to a generated POM file");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(description, gbc);
        final JLabel label9 = new JLabel();
        label9.setFont(new Font(label9.getFont().getName(), Font.BOLD, label9.getFont().getSize()));
        label9.setRequestFocusEnabled(false);
        label9.setText("Classifier");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label9, gbc);
        classifier = new JComboBox();
        classifier.setEditable(true);
        classifier.setFont(new Font(classifier.getFont().getName(), Font.PLAIN, classifier.getFont().getSize()));
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("");
        defaultComboBoxModel2.addElement("sources");
        defaultComboBoxModel2.addElement("javadoc");
        classifier.setModel(defaultComboBoxModel2);
        classifier.setPreferredSize(new Dimension(94, 20));
        classifier.setToolTipText("Add classifier to the artifact ");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(classifier, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer4, gbc);
        mavenBin = new JTextField();
        mavenBin.setDoubleBuffered(false);
        mavenBin.setText("");
        mavenBin.setToolTipText("Server Id to map on the <id> under <server> section of settings.xml In most cases, this parameter will be required for authentication.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 11;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(mavenBin, gbc);
        final JLabel label10 = new JLabel();
        label10.setFont(new Font(label10.getFont().getName(), Font.BOLD, label10.getFont().getSize()));
        label10.setForeground(Color.red);
        label10.setRequestFocusEnabled(false);
        label10.setText("Maven executable");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 11;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label10, gbc);
        final JLabel label11 = new JLabel();
        label11.setFont(new Font(label11.getFont().getName(), Font.BOLD, label11.getFont().getSize()));
        label11.setForeground(Color.black);
        label11.setRequestFocusEnabled(false);
        label11.setText("Proxy host");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 12;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label11, gbc);
        final JTextField textField1 = new JTextField();
        textField1.setDoubleBuffered(false);
        textField1.setText("");
        textField1.setToolTipText("Server Id to map on the <id> under <server> section of settings.xml In most cases, this parameter will be required for authentication.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 12;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(textField1, gbc);
        final JLabel label12 = new JLabel();
        label12.setFont(new Font(label12.getFont().getName(), Font.BOLD, label12.getFont().getSize()));
        label12.setForeground(Color.black);
        label12.setRequestFocusEnabled(false);
        label12.setText("Proxy port");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 13;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        topPanel.add(label12, gbc);
        final JTextField textField2 = new JTextField();
        textField2.setDoubleBuffered(false);
        textField2.setText("");
        textField2.setToolTipText("Server Id to map on the <id> under <server> section of settings.xml In most cases, this parameter will be required for authentication.");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 13;
        gbc.gridwidth = 2;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(textField2, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        formPanel.add(scrollPane1, BorderLayout.CENTER);
        console = new JTextArea();
        console.setFont(new Font("Courier New", console.getFont().getStyle(), 11));
        scrollPane1.setViewportView(console);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        formPanel.add(panel1, BorderLayout.SOUTH);
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 1, 1));
        panel1.add(bottomPanel, BorderLayout.EAST);
        clear.setFont(new Font(clear.getFont().getName(), Font.BOLD, clear.getFont().getSize()));
        clear.setText("Clear");
        bottomPanel.add(clear);
        deploy = new JButton();
        deploy.setFont(new Font(deploy.getFont().getName(), Font.BOLD, deploy.getFont().getSize()));
        deploy.setText("Deploy");
        bottomPanel.add(deploy);
        cancel = new JButton();
        cancel.setEnabled(true);
        cancel.setFont(new Font(cancel.getFont().getName(), Font.BOLD, cancel.getFont().getSize()));
        cancel.setText("Cancel");
        bottomPanel.add(cancel);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panel1.add(panel2, BorderLayout.WEST);
        loadPOM.setFont(new Font(loadPOM.getFont().getName(), Font.BOLD, loadPOM.getFont().getSize()));
        loadPOM.setHorizontalAlignment(0);
        loadPOM.setText("Load POM");
        panel2.add(loadPOM);
        cbDeployPOM = new JCheckBox();
        cbDeployPOM.setEnabled(true);
        cbDeployPOM.setText("");
        cbDeployPOM.setVisible(true);
        panel2.add(cbDeployPOM);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return formPanel;
    }
}
